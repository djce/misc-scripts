#!/usr/bin/perl
# vi: set ts=4 sw=4 :

use warnings;
use strict;

use Getopt::Long;
my $delete;
my $dry_run;
my $verbose;
GetOptions(
	'delete|D' => \$delete,
	'dry-run|n' => \$dry_run,
	'verbose|v' => \$verbose,
);

my %files;
my %by_size;

my $s = sub {
	my $n = $File::Find::name;

	my @s = lstat($n) or return;
	-f(_) or return;
	my $file = {
		path => $n,
		stat => \@s,
	};

	$files{$n} = $file;
	push @{ $by_size{ -s _ } }, $file;
};

@ARGV = "." if not @ARGV;
use File::Find 'find';
find({ wanted => $s, preprocess => sub { sort @_ }, no_chdir => 1 }, @ARGV);

for my $set (values %by_size) {
	@$set > 1 or next;

	require Digest::MD5;
	my %by_digest;

	for my $file (@$set) {
		my $hexdigest = get_digest($file->{path});
		$file->{hexdigest} = $hexdigest;
		push @{ $by_digest{ $hexdigest } }, $file;
	}

	for my $set2 (values %by_digest) {
		@$set2 > 1 or next;
		if ($delete) {
			my ($to_keep, @to_delete) = @$set2;

			print "KEEP $to_keep->{path}\n" if $verbose;

			for my $to_delete (@to_delete) {
				print "DELETE $to_delete->{path}\n" if $verbose;
				unlink $to_delete->{path} unless $dry_run;
			}
		} else {
			print $_, "\n" for sort map { $_->{path} } @$set2;
			print "\n";
		}
	}
}

sub get_digest {
	my $path = shift;

	open(my $fh, "<", $path) or die $!;
	my $ctx = Digest::MD5->new;
	$ctx->addfile($fh);
	$ctx->hexdigest;
}

